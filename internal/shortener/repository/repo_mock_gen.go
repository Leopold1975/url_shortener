// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/shortener/service/url_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/shortener/service/url_service.go -destination=./internal/shortener/repository/repo_mock_gen.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	urls "github.com/Leopold1975/url_shortener/internal/shortener/domain/urls"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateURL mocks base method.
func (m *MockRepository) CreateURL(ctx context.Context, u urls.URL) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURL", ctx, u)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateURL indicates an expected call of CreateURL.
func (mr *MockRepositoryMockRecorder) CreateURL(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURL", reflect.TypeOf((*MockRepository)(nil).CreateURL), ctx, u)
}

// DeleteURL mocks base method.
func (m *MockRepository) DeleteURL(ctx context.Context, shortURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURL", ctx, shortURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURL indicates an expected call of DeleteURL.
func (mr *MockRepositoryMockRecorder) DeleteURL(ctx, shortURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURL", reflect.TypeOf((*MockRepository)(nil).DeleteURL), ctx, shortURL)
}

// GetURL mocks base method.
func (m *MockRepository) GetURL(ctx context.Context, shortURL string) (urls.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, shortURL)
	ret0, _ := ret[0].(urls.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockRepositoryMockRecorder) GetURL(ctx, shortURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockRepository)(nil).GetURL), ctx, shortURL)
}

// UpdateURL mocks base method.
func (m *MockRepository) UpdateURL(ctx context.Context, u urls.URL) (urls.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateURL", ctx, u)
	ret0, _ := ret[0].(urls.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateURL indicates an expected call of UpdateURL.
func (mr *MockRepositoryMockRecorder) UpdateURL(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateURL", reflect.TypeOf((*MockRepository)(nil).UpdateURL), ctx, u)
}
